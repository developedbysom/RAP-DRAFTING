CLASS lhc_booking DEFINITION INHERITING FROM cl_abap_behavior_handler.

  PRIVATE SECTION.

    METHODS setBookingNumber FOR DETERMINE ON MODIFY
      IMPORTING keys FOR Booking~setBookingNumber.
    METHODS setBookingDt FOR DETERMINE ON SAVE
      IMPORTING keys FOR Booking~setBookingDt.
    METHODS calTotalPrice FOR DETERMINE ON MODIFY
      IMPORTING keys FOR Booking~calTotalPrice.
*    METHODS reCalcTotalPrice FOR MODIFY
*      IMPORTING keys FOR ACTION Booking~reCalcTotalPrice.

ENDCLASS.

CLASS lhc_booking IMPLEMENTATION.

  METHOD setBookingNumber.
    DATA max_bookingid TYPE /dmo/booking_id.
    DATA lt_booking_update TYPE TABLE FOR UPDATE zdmo_I_Travel_D\\Booking.
    "Read all travels for the requested bookings
    " If multiple bookings of the same travel are requested, the travel is returned only once.
    READ ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
    ENTITY Booking BY \_Travel
    FIELDS ( TravelUUID )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_travel).
    " Process all affected travels. Read respective bookings for one travel
    LOOP AT lt_travel INTO DATA(ls_travel).

      READ ENTITIES OF zdmo_i_travel_d IN LOCAL MODE
      ENTITY Travel BY \_Booking
      FIELDS ( BookingID )
      WITH VALUE #( ( %tky = ls_travel-%tky ) )
      RESULT DATA(lt_booking).

      max_bookingid = '0000'.
      LOOP AT lt_booking INTO DATA(ls_booking).
        IF ls_booking-BookingID > max_bookingid.
          max_bookingid = ls_booking-BookingID.
        ENDIF.
      ENDLOOP.

      LOOP AT lt_booking INTO ls_booking WHERE BookingID IS INITIAL.
        max_bookingid += 1.
        APPEND VALUE #( %tky = ls_booking-%tky
        BookingID = max_bookingid ) TO lt_booking_update.
      ENDLOOP.
    ENDLOOP.

    MODIFY ENTITIES OF zdmo_I_travel_d IN LOCAL MODE
    ENTITY booking
    UPDATE FIELDS ( BookingID ) WITH lt_booking_update
    REPORTED DATA(lt_reported).
    reported = CORRESPONDING #( DEEP lt_reported ).
  ENDMETHOD.

  METHOD setBookingDt.
    READ ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
    ENTITY Booking
    FIELDS ( BookingDate )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_booking).

    DELETE lt_booking WHERE BookingDate IS NOT INITIAL.
    CHECK lt_booking IS NOT INITIAL.
    LOOP AT lt_booking ASSIGNING FIELD-SYMBOL(<fs_booking>).
      <fs_booking>-BookingDate = cl_abap_context_info=>get_system_date( ).
    ENDLOOP.
    MODIFY ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
    ENTITY Booking
    UPDATE FIELDS ( BookingDate )
    WITH CORRESPONDING #( lt_booking )
    REPORTED DATA(lt_reported).
    reported = CORRESPONDING #( DEEP lt_reported ).
  ENDMETHOD.

  METHOD calTotalPrice.
    " Read all parent UUIDs
    READ ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
    ENTITY Booking BY \_Travel
    FIELDS ( TravelUUID )
    WITH CORRESPONDING #( keys )
    RESULT DATA(lt_travel).

    " Trigger Re-Calculation on Root Node
    MODIFY ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
    ENTITY Travel
    EXECUTE reCalcTotalPrice
    FROM CORRESPONDING #( lt_travel )
    REPORTED DATA(lt_reported).

    reported = CORRESPONDING #( DEEP lt_reported ).
  ENDMETHOD.

*  METHOD reCalcTotalPrice.
*    TYPES: BEGIN OF ty_amount_per_currencycode,
*             amount        TYPE /dmo/total_price,
*             currency_code TYPE /dmo/currency_code,
*           END OF ty_amount_per_currencycode.
*    DATA: amount_per_currencycode TYPE STANDARD TABLE OF ty_amount_per_currencycode.
*    " Read all relevant travel instances.
*    READ ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
*    ENTITY Travel
*    FIELDS ( BookingFee CurrencyCode )
*    WITH CORRESPONDING #( keys )
*    RESULT DATA(lt_travel)
*    FAILED failed.
*
*    DELETE lt_travel WHERE CurrencyCode IS INITIAL.
*
*    LOOP AT lt_travel ASSIGNING FIELD-SYMBOL(<fs_travel>).
*      " Set the start for the calculation by adding the booking fee.
*      amount_per_currencycode = VALUE #( ( amount = <fs_travel>-BookingFee
*      currency_code = <fs_travel>-CurrencyCode ) ).
*
*      " Read all associated bookings and add them to the total price.
*      READ ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
*      ENTITY Travel BY \_Booking
*      FIELDS ( FlightPrice CurrencyCode )
*      WITH VALUE #( ( %tky = <fs_travel>-%tky ) )
*      RESULT DATA(lt_booking).
*
*      LOOP AT lt_booking INTO DATA(booking) WHERE CurrencyCode IS NOT INITIAL.
*        COLLECT VALUE ty_amount_per_currencycode( amount = booking-FlightPrice
*        currency_code = booking-CurrencyCode ) INTO amount_per_currencycode.
*      ENDLOOP.
*
*      " Read all associated booking supplements and add them to the total price.
*      READ ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
*      ENTITY Booking BY \_BookingSupplement
*      FIELDS ( BookSupplPrice CurrencyCode )
*      WITH VALUE #( FOR rba_booking IN lt_booking ( %tky = rba_booking-%tky ) )
*      RESULT DATA(lt_bookingsupplement).
*
*      LOOP AT lt_bookingsupplement INTO DATA(bookingsupplement) WHERE CurrencyCode IS NOT INITIAL.
*        COLLECT VALUE ty_amount_per_currencycode( amount = bookingsupplement-BookSupplPrice
*        currency_code = bookingsupplement-CurrencyCode ) INTO amount_per_currencycode.
*      ENDLOOP.
*      CLEAR <fs_travel>-TotalPrice.
*
*      LOOP AT amount_per_currencycode INTO DATA(single_amount_per_currencycode).
*        " If needed do a Currency Conversion
*        IF single_amount_per_currencycode-currency_code = <fs_travel>-CurrencyCode.
*          <fs_travel>-TotalPrice += single_amount_per_currencycode-amount.
*        ELSE.
*          /dmo/cl_flight_amdp=>convert_currency(
*          EXPORTING
*          iv_amount = single_amount_per_currencycode-amount
*          iv_currency_code_source = single_amount_per_currencycode-currency_code
*          iv_currency_code_target = <fs_travel>-CurrencyCode
*          iv_exchange_rate_date = cl_abap_context_info=>get_system_date( )
*          IMPORTING
*          ev_amount = DATA(total_booking_price_per_curr)
*          ).
*          <fs_travel>-TotalPrice += total_booking_price_per_curr.
*        ENDIF.
*      ENDLOOP.
*    ENDLOOP.
*    " write back the modified total_price of travels
*    MODIFY ENTITIES OF zdmo_I_Travel_D IN LOCAL MODE
*    ENTITY travel
*    UPDATE FIELDS ( TotalPrice )
*    WITH CORRESPONDING #( lt_travel ).
*  ENDMETHOD.

ENDCLASS.

*"* use this source file for the definition and implementation of
*"* local helper classes, interface definitions and type
*"* declarations